(defun osc-status-timer-func (buf)
  (with-current-buffer buf
    (message "timer exited")
  )
)
(defun osc-status-skip-word (index)
  (let ((match nil))
    (dolist (m skip-word-list)
      (setq match (or match (= m index)))
    )
    match
  )
)
(defun osc-status-pp (string)
  (when (string-match "^_;" string)
    (setq string (replace-regexp-in-string "\/[^\/;]+;" ";" string))
    (setq string (replace-regexp-in-string "\/[^\/;]+$" "" string))
  )

  (let ((pretty-string "") (index 0))
    (dolist (word (split-string string ";"))
      (when (not (osc-status-skip-word index))
        (setq pretty-string (concat pretty-string word ","))
      )
      (setq index (+ 1 index))
    )
    (setq pretty-string (replace-regexp-in-string ",$" "" pretty-string))
    (concat pretty-string "\n")
  )
)
(defun osc-status-is-header-p (string)
  (string-match "^_;" string)
)
(defun osc-status-match-delete-p (string)
  (let ((match nil))
    (dolist (m remove-list)
      (setq match (or match (string-match m string)))
    )
    match
  )
)
(defun osc-status-match-needed-p (string)
  (let ((match nil))
    (dolist (m needed-list)
      (setq match (or match (string-match m string)))
    )
    match
  )
)
(defun osc-status-string-needed (string)
  (or
    (osc-status-is-header-p string)
    (and
      (not (osc-status-match-delete-p string))
      (osc-status-match-needed-p string)
    )
  )
)
(defun osc-status-filter-output (from to)
  (with-current-buffer to (erase-buffer))
  (with-current-buffer from
    (dolist (string (split-string (buffer-string) "\n"))
      (with-current-buffer to
        (if (osc-status-string-needed string)
          (insert (osc-status-pp string))
        )
      )
    )
  )
  (org-table-convert-region (point-min) (point-max))
  (setq point (point-min))
  (org-table-insert-hline)
)
(defun osc-status-sentinel (proc event)
  ;(message event)
  (when (string= event "finished\n")
    (message "timer started")
    (with-current-buffer (process-buffer proc)
      (setq timer (run-at-time "15 sec" nil 'osc-status-timer-func (process-buffer proc)))
      (osc-status-filter-output temp-buf (current-buffer))
    )
  )
)
(defun osc-status-filter (proc string)
  (when (and proc (buffer-live-p (process-buffer proc)))
    (with-current-buffer (process-buffer proc)
      (if is-new (progn (with-current-buffer temp-buf (erase-buffer)) (setq is-new nil)))
      (with-current-buffer temp-buf
        (goto-char (point-max))
        (insert string)
))))
(defun osc-status-run-process (buf)
  (set-buffer buf)
  (setq process (start-process-shell-command "osc-status" buf command))
  (setq is-new t)
  (set-process-filter process 'osc-status-filter)
  (set-process-sentinel process 'osc-status-sentinel)
)

(defun osc-status-mode (project api)
  (set-buffer (get-buffer-create (concat "osc-status-" project)))
  (setq-local temp-buf (get-buffer-create (concat "osc-status-" project "-temp")))
  (setq-local command (concat "osc r --csv " project))
  (setq-local timer nil)
  (setq-local process nil)
  (setq-local is-new nil)
  (setq-local remove-list '("^GSSDP"))
  (setq-local needed-list '("building" "finished" "failed" "unresolvable" "succeeded"))
  (setq-local skip-word-list '(2 3 5 6 8 9 11 12 13 16 18))
  (setq truncate-lines t)
  (setq major-mode 'osc-status-mode
        mode-name "osc-status")
  (osc-status-run-process (current-buffer))
)

(defun osc-status ()
  (require 'org)
  (let ((project
    (read-string "Project name: " "Tizen:Common" () "Tizen:Common"))
    (api nil))
    (osc-status-mode project api)

  )
)


;(osc-status)
