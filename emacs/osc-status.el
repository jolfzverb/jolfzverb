(defun osc-status-timer-func (buf)
  (with-current-buffer buf
    (message "timer exited")
  )
  (osc-status-run-process buf)
)
(defun osc-status-skip-word (index)
  (let ((match nil))
    (dolist (m skip-word-list)
      (setq match (or match (= m index)))
    )
    match
  )
)
(defun osc-status-pp (string)
  (when (string-match "^_;" string)
    (setq string (replace-regexp-in-string "\/[^\/;]+;" ";" string))
    (setq string (replace-regexp-in-string "\/[^\/;]+$" "" string))
  )

  (let ((pretty-string "") (index 0))
    (dolist (word (split-string string ";"))
      (when (not (osc-status-skip-word index))
        (setq pretty-string (concat pretty-string word ","))
      )
      (setq index (+ 1 index))
    )
    (setq pretty-string (replace-regexp-in-string ",$" "" pretty-string))
    (concat pretty-string "\n")
  )
)
(defun osc-status-is-header-p (string)
  (string-match "^_," string)
)
(defun osc-status-match-delete-p (string)
  (let ((match nil))
    (dolist (m remove-list)
      (setq match (or match (string-match m string)))
    )
    match
  )
)
(defun osc-status-match-needed-p (string)
  (let ((match nil))
    (dolist (m selected-list)
      (setq match (or match (string-match m string)))
    )
    match
  )
)
(defun osc-status-string-needed (string)
  (or
    (osc-status-is-header-p string)
    (and
      (not (osc-status-match-delete-p string))
      (osc-status-match-needed-p string)
    )
  )
)
(defun osc-status-filter-output (from to)
  (with-current-buffer to 
    (setq buffer-read-only nil)
    (erase-buffer)
    (with-current-buffer from
      (dolist (string (split-string (buffer-string) "\n"))
        (with-current-buffer to
	  (let ((ppstring (osc-status-pp string)))
	    (if (osc-status-string-needed ppstring)
		(insert ppstring))))))
    (org-table-convert-region (point-min) (point-max))
    (setq point (point-min))
    (org-table-insert-hline)
    (setq buffer-read-only t)))

(defun osc-status-sentinel (proc event)
  ;(message event)
  (when (string= event "finished\n")
    (message "timer started")
    (with-current-buffer (process-buffer proc)
      (setq timer (if timeout (run-at-time timeout nil 'osc-status-timer-func (process-buffer proc))))
      (osc-status-filter-output temp-buf (current-buffer))
    )
  )
)
(defun osc-status-filter (proc string)
  (when (and proc (buffer-live-p (process-buffer proc)))
    (with-current-buffer (process-buffer proc)
      (if is-new (progn (with-current-buffer temp-buf (erase-buffer)) (setq is-new nil)))
      (with-current-buffer temp-buf
        (goto-char (point-max))
        (insert string)))))

(defun osc-status-run-process (buf)
  (with-current-buffer buf
    (setq process (start-process-shell-command "osc-status" buf command))
    (setq is-new t)
    (set-process-filter process 'osc-status-filter)
    (set-process-sentinel process 'osc-status-sentinel)))
(defun osc-status-add (list second-list)
  (dolist (m second-list)
    (add-to-list 'list second-list)))
(defun osc-status-remove (list second-list)
  (dolist (m second-list)
    (setq list (remove m list))))


(defun osc-status-edit ()
  (interactive)
  (let ((opt1 (completing-read
	      "Select option: "
	      '(("removed" 1) ("selected" 2) ("columns" 3))
	      nil t))
	(opt2 (completing-read "Select action: " '(("add" 1) ("remove" 2)) nil nil)))
    (if (string= opt1 "removed")
	(progn (if (string= opt2 "add")
		   (add-to-list 'remove-list (read-string (concat "Adding to remove list: "
								  (format "%s" remove-list) "."))))
	       (if (string= opt2 "remove")
		   (setq-local remove-list
			       (remove (completing-read "What to remove: " remove-list nil t) remove-list)))
	       (if (not (string-match "^\\(add\\|remove\\)$" opt2))
		   (setq-local remove-list (read-string (concat "Adding to remove list: " (format "%s" remove-list) "."))))
	       (message (concat "Remove list: " (format "%s" remove-list) "."))))
    (if (string= opt1 "selected")
	(progn (if (string= opt2 "add")
		   (add-to-list 'selected-list (read-string (concat "Adding to selected list: "
								  (format "%s" selected-list) "."))))
	       (if (string= opt2 "remove")
		   (setq-local selected-list
			       (remove (completing-read "What to remove: " selected-list nil t) selected-list)))
	       (if (not (string-match "^\\(add\\|remove\\)$" opt2))
		   (setq-local selected-list (read-string (concat "Setting to selected list: " (format "%s" selected-list) "."))))
	       (message (concat "Remove list: " (format "%s" selected-list) ".")))))
  (osc-status-filter-output temp-buf (current-buffer)))
	


(defun osc-status-mode-backup (project api)
  (let* ((buf-name (concat "osc-status-" project))
	(bufp (get-buffer buf-name))
	(buf (if bufp bufp (get-buffer-create buf-name)))) 
  (set-buffer buf)
  (setq-local temp-buf (get-buffer-create (concat "osc-status-" project "-temp")))
  (setq-local command (concat "osc r --csv " project))
  (setq-local timer nil)
  (setq-local is-new nil)
  (setq-local remove-list '("^GSSDP"))
  (setq-local selected-list '("building" "finished" "failed" "unresolvable" "succeeded"))
  (setq-local my-highlights
    '(
       ("succeeded" . font-lock-string-face)
       ("building\\|scheduled\\|dispatching\\|finished" . font-lock-function-name-face)
       ("failed\\|unresolvable\\|broken" . font-lock-warning-face)
     )
  )
  (setq font-lock-defaults '(my-highlights))
  (font-lock-mode)
  (setq-local skip-word-list '(2 3 5 6 8 9 11 12 13 16 18))
  (setq truncate-lines t)
  (setq buffer-read-only t)
  (setq major-mode 'osc-status-mode
        mode-name "osc-status")
  (local-set-key (kbd "C-c e") 'osc-status-edit)
  (kill-process (get-buffer-process (current-buffer)))
  (osc-status-run-process (current-buffer)))
)
(defun osc-status-init-buffer (buf)
  (with-current-buffer buf 
    (progn (setq-local temp-buf (get-buffer-create (concat (buffer-name) "-temp")))
	   (setq-local command (concat "osc r --csv " project))
	   (setq-local timer nil)
	   (setq-local timeout "15 sec")
	   (setq-local remove-list '("^GSSDP"))
	   (setq-local selected-list '("building" "finished" "failed" "unresolvable" "succeeded"))
	   (setq-local my-highlights
		       '(("succeeded" . font-lock-string-face)
			 ("building\\|scheduled\\|dispatching\\|finished" . font-lock-function-name-face)
			 ("failed\\|unresolvable\\|broken" . font-lock-warning-face)))
	   (setq font-lock-defaults '(my-highlights))
	   (font-lock-mode)
	   (setq-local skip-word-list '(2 3 5 6 8 9 11 12 13 16 18))
	   (setq truncate-lines t)
	   (setq buffer-read-only t)
	   (osc-status-run-process (current-buffer)))))

(defun osc-status-mode (project api)
  (let ((buf-name (concat "osc-status-" project)))
    (if (get-buffer buf-name) (kill-buffer (get-buffer buf-name)) ())
    (set-buffer (get-buffer-create buf-name))
    (osc-status-init-buffer (current-buffer))
    (setq major-mode 'osc-status-mode
	  mode-name "osc-status")
    (local-set-key (kbd "C-c e") 'osc-status-edit))
)

(defun osc-status ()
  (require 'org)
  (let ((project
	 (read-string "Project name: " "devel:arm_toolchain:Mobile:asan_stable" ()
		      "devel:arm_toolchain:Mobile:asan_stable"))
	(api nil))
    (osc-status-mode project api)))

(provide 'osc-status)
(osc-status)
